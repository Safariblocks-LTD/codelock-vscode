import * as vscode from 'vscode';
import { SecurityIssue } from '../api/apiClient';
import * as path from 'path';

export class VulnerabilityTreeItem extends vscode.TreeItem {
    constructor(
        public readonly vulnerability: SecurityIssue,
        public readonly collapsibleState: vscode.TreeItemCollapsibleState
    ) {
        super(vulnerability.title, collapsibleState);
        
        this.tooltip = `${vulnerability.description}\n\nFile: ${vulnerability.file}\nLine: ${vulnerability.line}\nSeverity: ${vulnerability.severity}`;
        this.description = `${path.basename(vulnerability.file)}:${vulnerability.line}`;
        
        // Set icon based on severity
        this.iconPath = this.getSeverityIcon(vulnerability.severity);
        
        // Set context value for menu actions
        this.contextValue = 'vulnerability';
        
        // Command to open file at the vulnerability location
        this.command = {
            command: 'vscode.open',
            title: 'Open File',
            arguments: [
                vscode.Uri.file(vulnerability.file),
                {
                    selection: new vscode.Range(
                        vulnerability.line - 1,
                        vulnerability.column || 0,
                        vulnerability.line - 1,
                        (vulnerability.column || 0) + (vulnerability.code?.length || 0)
                    )
                }
            ]
        };
    }

    private getSeverityIcon(severity: string): vscode.ThemeIcon {
        switch (severity) {
            case 'critical':
                return new vscode.ThemeIcon('error', new vscode.ThemeColor('errorForeground'));
            case 'high':
                return new vscode.ThemeIcon('warning', new vscode.ThemeColor('problemsWarningIcon.foreground'));
            case 'medium':
                return new vscode.ThemeIcon('info', new vscode.ThemeColor('problemsInfoIcon.foreground'));
            case 'low':
                return new vscode.ThemeIcon('circle-outline', new vscode.ThemeColor('descriptionForeground'));
            default:
                return new vscode.ThemeIcon('bug');
        }
    }
}

export class VulnerabilityProvider implements vscode.TreeDataProvider<VulnerabilityTreeItem> {
    private _onDidChangeTreeData: vscode.EventEmitter<VulnerabilityTreeItem | undefined | null | void> = new vscode.EventEmitter<VulnerabilityTreeItem | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<VulnerabilityTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;

    private vulnerabilities: SecurityIssue[] = [];
    private context: vscode.ExtensionContext;

    constructor(context: vscode.ExtensionContext) {
        this.context = context;
        this.registerCommands();
    }

    refresh(): void {
        this._onDidChangeTreeData.fire();
    }

    updateVulnerabilities(vulnerabilities: SecurityIssue[]): void {
        this.vulnerabilities = vulnerabilities;
        this.refresh();
        
        // Update diagnostics collection
        this.updateDiagnostics(vulnerabilities);
    }

    getTreeItem(element: VulnerabilityTreeItem): vscode.TreeItem {
        return element;
    }

    getChildren(element?: VulnerabilityTreeItem): Thenable<VulnerabilityTreeItem[]> {
        if (!element) {
            // Root level - group by severity
            return Promise.resolve(this.getVulnerabilityGroups());
        }
        return Promise.resolve([]);
    }

    private getVulnerabilityGroups(): VulnerabilityTreeItem[] {
        if (this.vulnerabilities.length === 0) {
            return [];
        }

        // Group vulnerabilities by severity
        const groups = new Map<string, SecurityIssue[]>();
        
        for (const vuln of this.vulnerabilities) {
            const severity = vuln.severity;
            if (!groups.has(severity)) {
                groups.set(severity, []);
            }
            groups.get(severity)!.push(vuln);
        }

        // Create tree items for each group
        const items: VulnerabilityTreeItem[] = [];
        const severityOrder = ['critical', 'high', 'medium', 'low'];
        
        for (const severity of severityOrder) {
            const vulns = groups.get(severity);
            if (vulns && vulns.length > 0) {
                // Create individual items for each vulnerability
                for (const vuln of vulns) {
                    items.push(new VulnerabilityTreeItem(vuln, vscode.TreeItemCollapsibleState.None));
                }
            }
        }

        return items;
    }

    private updateDiagnostics(vulnerabilities: SecurityIssue[]): void {
        const diagnosticCollection = vscode.languages.createDiagnosticCollection('seguro');
        const diagnosticMap = new Map<string, vscode.Diagnostic[]>();

        for (const vuln of vulnerabilities) {
            const uri = vscode.Uri.file(vuln.file);
            const range = new vscode.Range(
                vuln.line - 1,
                vuln.column || 0,
                vuln.line - 1,
                (vuln.column || 0) + (vuln.code?.length || 100)
            );

            const diagnostic = new vscode.Diagnostic(
                range,
                vuln.description,
                this.getSeverityLevel(vuln.severity)
            );

            diagnostic.source = 'Seguro';
            diagnostic.code = vuln.type;
            
            if (vuln.suggestion) {
                diagnostic.relatedInformation = [
                    new vscode.DiagnosticRelatedInformation(
                        new vscode.Location(uri, range),
                        `Suggestion: ${vuln.suggestion}`
                    )
                ];
            }

            const key = uri.toString();
            if (!diagnosticMap.has(key)) {
                diagnosticMap.set(key, []);
            }
            diagnosticMap.get(key)!.push(diagnostic);
        }

        // Clear existing diagnostics
        diagnosticCollection.clear();

        // Set new diagnostics
        for (const [uriString, diagnostics] of diagnosticMap) {
            diagnosticCollection.set(vscode.Uri.parse(uriString), diagnostics);
        }
    }

    private getSeverityLevel(severity: string): vscode.DiagnosticSeverity {
        switch (severity) {
            case 'critical':
            case 'high':
                return vscode.DiagnosticSeverity.Error;
            case 'medium':
                return vscode.DiagnosticSeverity.Warning;
            case 'low':
                return vscode.DiagnosticSeverity.Information;
            default:
                return vscode.DiagnosticSeverity.Hint;
        }
    }

    private registerCommands(): void {
        // Command to fix a vulnerability
        const fixVulnerabilityCommand = vscode.commands.registerCommand(
            'seguro.fixVulnerabilityFromTree',
            async (item: VulnerabilityTreeItem) => {
                await vscode.commands.executeCommand('seguro.fixVulnerability', item.vulnerability);
            }
        );

        // Command to ignore a vulnerability
        const ignoreVulnerabilityCommand = vscode.commands.registerCommand(
            'seguro.ignoreVulnerability',
            async (item: VulnerabilityTreeItem) => {
                const result = await vscode.window.showWarningMessage(
                    `Are you sure you want to ignore this ${item.vulnerability.severity} severity vulnerability?`,
                    { modal: true },
                    'Yes, Ignore',
                    'Cancel'
                );

                if (result === 'Yes, Ignore') {
                    // Remove from current list
                    this.vulnerabilities = this.vulnerabilities.filter(
                        v => v.id !== item.vulnerability.id
                    );
                    this.refresh();
                    
                    vscode.window.showInformationMessage('Vulnerability ignored');
                }
            }
        );

        // Command to copy vulnerability details
        const copyVulnerabilityCommand = vscode.commands.registerCommand(
            'seguro.copyVulnerabilityDetails',
            async (item: VulnerabilityTreeItem) => {
                const details = `Security Issue: ${item.vulnerability.title}
File: ${item.vulnerability.file}
Line: ${item.vulnerability.line}
Severity: ${item.vulnerability.severity}
Type: ${item.vulnerability.type}
Description: ${item.vulnerability.description}
${item.vulnerability.suggestion ? `Suggestion: ${item.vulnerability.suggestion}` : ''}
${item.vulnerability.cweId ? `CWE ID: ${item.vulnerability.cweId}` : ''}`;

                await vscode.env.clipboard.writeText(details);
                vscode.window.showInformationMessage('Vulnerability details copied to clipboard');
            }
        );

        // Command to show vulnerability in web view
        const showVulnerabilityDetailsCommand = vscode.commands.registerCommand(
            'seguro.showVulnerabilityDetails',
            async (item: VulnerabilityTreeItem) => {
                const panel = vscode.window.createWebviewPanel(
                    'vulnerabilityDetails',
                    `Security Issue: ${item.vulnerability.title}`,
                    vscode.ViewColumn.Beside,
                    {
                        enableScripts: true
                    }
                );

                panel.webview.html = this.getVulnerabilityDetailsHtml(item.vulnerability);
            }
        );

        this.context.subscriptions.push(
            fixVulnerabilityCommand,
            ignoreVulnerabilityCommand,
            copyVulnerabilityCommand,
            showVulnerabilityDetailsCommand
        );
    }

    private getVulnerabilityDetailsHtml(vulnerability: SecurityIssue): string {
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Issue Details</title>
    <style>
        body {
            font-family: var(--vscode-font-family);
            color: var(--vscode-foreground);
            background-color: var(--vscode-editor-background);
            padding: 20px;
            line-height: 1.6;
        }
        .severity-${vulnerability.severity} {
            color: ${this.getSeverityColor(vulnerability.severity)};
            font-weight: bold;
        }
        .code-block {
            background-color: var(--vscode-textCodeBlock-background);
            border: 1px solid var(--vscode-input-border);
            border-radius: 4px;
            padding: 10px;
            font-family: var(--vscode-editor-font-family);
            margin: 10px 0;
        }
        .suggestion {
            background-color: var(--vscode-inputValidation-infoBackground);
            border-left: 4px solid var(--vscode-inputValidation-infoBorder);
            padding: 10px;
            margin: 10px 0;
        }
        .references {
            margin-top: 20px;
        }
        .references a {
            color: var(--vscode-textLink-foreground);
            text-decoration: none;
        }
        .references a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <h1>🛡️ Security Issue Details</h1>
    
    <h2>${vulnerability.title}</h2>
    <p><strong>Severity:</strong> <span class="severity-${vulnerability.severity}">${vulnerability.severity.toUpperCase()}</span></p>
    <p><strong>Type:</strong> ${vulnerability.type}</p>
    <p><strong>File:</strong> ${path.basename(vulnerability.file)}</p>
    <p><strong>Line:</strong> ${vulnerability.line}</p>
    ${vulnerability.cweId ? `<p><strong>CWE ID:</strong> ${vulnerability.cweId}</p>` : ''}
    
    <h3>Description</h3>
    <p>${vulnerability.description}</p>
    
    ${vulnerability.code ? `
    <h3>Vulnerable Code</h3>
    <div class="code-block">${vulnerability.code}</div>
    ` : ''}
    
    ${vulnerability.suggestion ? `
    <div class="suggestion">
        <h3>💡 Suggested Fix</h3>
        <p>${vulnerability.suggestion}</p>
    </div>
    ` : ''}
    
    ${vulnerability.references && vulnerability.references.length > 0 ? `
    <div class="references">
        <h3>References</h3>
        <ul>
            ${vulnerability.references.map(ref => `<li><a href="${ref}" target="_blank">${ref}</a></li>`).join('')}
        </ul>
    </div>
    ` : ''}
</body>
</html>`;
    }

    private getSeverityColor(severity: string): string {
        switch (severity) {
            case 'critical':
                return '#ff4444';
            case 'high':
                return '#ff8800';
            case 'medium':
                return '#ffaa00';
            case 'low':
                return '#00aa00';
            default:
                return 'var(--vscode-foreground)';
        }
    }
}
